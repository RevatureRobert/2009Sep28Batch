<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- writing configuration as code...
		tell Spring what classes we have, and Spring will manage our application flow for us-->
	
	
	<!-- 
		scopes of a spring bean
			Spring 4 (this is the one to know)
				Singleton			one instance for all references
				Prototype			one instance for each reference
				Request				(war only) one instance for each HTTPReqeust
				Session				(war only) one instance for each HTTPSession
				GlobalSession		(war only) one instance for all HTTPSessions
			
			Spring 5 scopes
				Singleton
				Prototype
				Request
				Session
				Application			(war only) one instance for the servlet context lifecycle
									meant to replace GlobalContext
				WebSocket			(war only) one instance for the websocket lifecycle
		
		All of this is within the IoC container...
	-->
	
	<!-- 
		4 different types of Dependency Injection
			Constructor Injection (supported)
			Setter Injection (supported)
			Field Injection (unofficially supported)
			Interface Injection (unsupported)
	 -->
	
	<bean id="mockdao" class="com.springy.repo.MockDao" />
	<!-- Bean wiring; taking beans and wiring them together... -->
	
	
	<!-- This is specifically constructor injection -->
	<!-- 
	<bean class="com.springy.service.MockService">
		<constructor-arg index="0" type="com.springy.repo.MockDao" ref="mockdao" />
	</bean>
	-->
	
	<!-- This is setter injection...
	<bean class="com.springy.service.MockService">
		<property name="md" ref="mockdao" />
	</bean>
	-->
	
	<!-- autowiring -->
	<bean class="com.springy.service.MockService" autowire="byType">
		<!-- 
			Primitive injection!
		<constructor-arg index="1" type="int" value="5" />
		 -->
	</bean>
	
	<!--
		Autowiring
			automatic process of bean wiring
			4 types
				no				no autowire, sets it to off
				byType			Spring autowires by looking at the class property
									datatypes, then matching them to the bean in
									the IoC Container;
									uses setter injection
				constructor		works similarly to byType, except it uses constructor
									injection and checks the type inside the
									constructor params and matches it to the bean in
									the IoC Container
				byName			Looks at class property variable names and finds beans
									in the container with the same name;
									uses setter injection
			
			You can create aliases for the beans
	 -->
</beans>